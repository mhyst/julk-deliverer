package julk.net.w3s;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Calendar;

/**********************************************************************************
 * CLASS: HttpTofile
 *	
 * This class represents a web page.
 * Its responsabilities are:
 * -connect to a web page
 * -download the content
 * -store it in a file
 * -Also, this class, has some searching habilities along the file boundled
 *
 * @author Julio Cesar Serrano Ortuno
 * created November 26, 2007
 * updated December 15, 2007
 * license General Public License
 **********************************************************************************/
public class HttpToFile {
	private String filename;
	private BufferedReader in;
	private Link lnk;
	private final int MAX_CONTENT_LENGTH = 1048576; 

	/**
	 * Creates a new HttpToFile object
	 * 
	 * @param lnk	   the link pointing to the page
	 * @param filename filename in which the content will be stored
	 * @throws Exception
	 */
	public HttpToFile(Link lnk, String filename) throws Exception {
		this.filename = filename;
		this.lnk = lnk;
		HttpURLConnection http;
		URL url = new URL(lnk.getLink());
		http = (HttpURLConnection) url.openConnection();
		http.setRequestMethod("GET");
		http.connect();
		int code = http.getResponseCode();
		if (code < 200 || code > 300) {
			http.disconnect();
			Log.log("http.log","HttpToFile", "Error connection to "+lnk.getLink());
			throw new Exception("Error connection to "+lnk.getLink());
		}
		if (http.getContentLength() > MAX_CONTENT_LENGTH) {
			http.disconnect();
			Log.log("http.log","HttpToFile", "La page "+lnk.getLink()+" supera el límite de tamaño establecido en "+MAX_CONTENT_LENGTH+" bytes.");
			throw new Exception("The page "+lnk.getLink()+" exceeds the size limits ("+MAX_CONTENT_LENGTH+" bytes).");
		}

		BufferedReader in = new BufferedReader(new InputStreamReader(http.getInputStream()));
		String line;
		PrintWriter out = new PrintWriter(new FileWriter(this.filename));
		while ((line = in.readLine())!= null) {
			out.println(line);
		}
		http.disconnect();
		out.close();
	}
	
	/**
	 * Generates a filename with the current date
	 * @return the filename generated
	 */
	private static String generateFilename() {
		Calendar c = Calendar.getInstance();
		return "tmp"+c.get(Calendar.YEAR)+
		 		c.get(Calendar.MONTH)+
		 		c.get(Calendar.DAY_OF_MONTH)+
		 		c.get(Calendar.HOUR_OF_DAY)+
		 		c.get(Calendar.MINUTE)+
		 		c.get(Calendar.SECOND)+
		 		c.get(Calendar.MILLISECOND)+".htm";
	}
	
	/**
	 * Creates a HttpToFile object with an autogenerated
	 * filename.
	 *  
	 * @param lnk	the link pointing to the page
	 * @throws Exception
	 */
	public HttpToFile(Link lnk) throws Exception {
		this(lnk,generateFilename());
	}
	
	/**
	 * Opens the file so others can read even without
	 * knowing the name.
	 * 
	 * @return a BufferedReader pointint to the file
	 * @throws Exception
	 */
	public BufferedReader openFile() throws Exception {
		in = new BufferedReader(new FileReader(filename));
		return in;
	}
	
	/**
	 * Closes the file
	 */
	public void closeFile() {
		if (in != null) {
			try {
				in.close();
			} catch (Exception e) {
				
			}
		}
	}

	/**
	 * Gets the Link boundled to this HttpToFile object
	 * @return the link
	 */
	public Link getLink() {
		return lnk;
	}
	
	/**
	 * Gets the extension of the file
	 * @return the extension as a string
	 */
	public String extension() {
		String ln = lnk.getLink().toLowerCase();
		if (ln.startsWith("http://")) {
			ln = lnk.getLink().substring(7);
		}
		int idi = ln.lastIndexOf("/");
		if (idi == -1) {
			return "html";
		}
		String fn = lnk.getLink().substring(idi+6);
		int id = fn.lastIndexOf(".");
		if (id != -1) {
			return fn.substring(id+1);
		} else {
			return "html";
		}
	}
	
	/**
	 * Search a term in one line of text
	 * returns the number of times the term appears in the
	 * line of text.
	 * 
	 * @param line the line of text
	 * @param term the the search term
	 * @return the number of times the term appears in the line
	 */
	private int getLineOcurrences(String line, String term) {
		int n = 0;
		int idx;
		
		//line and term must be already in lowercase
		idx = line.indexOf(term);
		while (idx != -1) {
			n++;
			idx = line.indexOf(term, idx+1);
		}
		return n;
	}
	
	/**
	 * Search several terms in the same line of text.
	 * Uses the avobe function for every term.
	 * 
	 * @param line the line of text
	 * @param terms the search terms array
	 * @return an array of ints containing the number of ocurrences of each term in the line
	 */
	private int[] getLineOcurrences(String line, String[] terms) {
		int[] ocurrences = new int[terms.length];
		
		for (int i = 0; i < terms.length; i++) {
			ocurrences[i] = getLineOcurrences(line, terms[i]);
		}
		return ocurrences;
	}

	/**
	 * Does the same as the above method, but only for
	 * one term in all the file.
	 * 
	 * @param term the search term
	 * @return the number of times that appear the term in the entire file
	 * @throws Exception
	 * @deprecated
	 */
	public int getOcurrences(String term) 
	throws Exception {
		
		BufferedReader in = openFile();
		term = term.toLowerCase();
		String line;
		int count = 0;
		while ((line = in.readLine())!= null) {
			count+=getLineOcurrences(line.toLowerCase(),
								 	 term);		
		}
		closeFile();
		
		return count;
	}

	/**
	 * Search the entire file for the ocurrences
	 * of several search terms. 
	 * Uses the quicker method of searching several
	 * terms for one line at a time.
	 * 
	 * @param terms the search terms
	 * @return and array of int containing the number times each term appeared in the file
	 * @throws Exception
	 */
	public int[] getOcurrences(String[] terms) 
	throws Exception {
		
		int[] results = new int[terms.length];
		int[] ocurrences;
		BufferedReader in = openFile();
		String line;
		//int count = 0;
		for (int i = 0; i < terms.length; i++) {
			terms[i]= terms[i].toLowerCase();
			results[i] = 0;
		}
		while ((line = in.readLine())!= null) {
			ocurrences = getLineOcurrences(line.toLowerCase(),
							 	 		   terms);
			for (int i = 0; i < results.length; i++) {
				results[i] += ocurrences[i];
			}
		}
		closeFile();
		
		return results;
	}
}
